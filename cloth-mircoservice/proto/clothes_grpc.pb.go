// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: proto/clothes.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ClothService_CreateCloth_FullMethodName = "/proto.ClothService/CreateCloth"
	ClothService_GetCloth_FullMethodName    = "/proto.ClothService/GetCloth"
	ClothService_EditCloth_FullMethodName   = "/proto.ClothService/EditCloth"
	ClothService_DeleteCloth_FullMethodName = "/proto.ClothService/DeleteCloth"
	ClothService_ListClothes_FullMethodName = "/proto.ClothService/ListClothes"
)

// ClothServiceClient is the client API for ClothService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClothServiceClient interface {
	CreateCloth(ctx context.Context, in *CreateClothRequest, opts ...grpc.CallOption) (*CreateClothResponse, error)
	GetCloth(ctx context.Context, in *GetClothRequest, opts ...grpc.CallOption) (*GetClothResponse, error)
	EditCloth(ctx context.Context, in *EditClothRequest, opts ...grpc.CallOption) (*EditClothResponse, error)
	DeleteCloth(ctx context.Context, in *DeleteClothRequest, opts ...grpc.CallOption) (*DeleteClothResponse, error)
	ListClothes(ctx context.Context, in *ListClothesRequest, opts ...grpc.CallOption) (*ListClothesResponse, error)
}

type clothServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClothServiceClient(cc grpc.ClientConnInterface) ClothServiceClient {
	return &clothServiceClient{cc}
}

func (c *clothServiceClient) CreateCloth(ctx context.Context, in *CreateClothRequest, opts ...grpc.CallOption) (*CreateClothResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateClothResponse)
	err := c.cc.Invoke(ctx, ClothService_CreateCloth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clothServiceClient) GetCloth(ctx context.Context, in *GetClothRequest, opts ...grpc.CallOption) (*GetClothResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClothResponse)
	err := c.cc.Invoke(ctx, ClothService_GetCloth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clothServiceClient) EditCloth(ctx context.Context, in *EditClothRequest, opts ...grpc.CallOption) (*EditClothResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditClothResponse)
	err := c.cc.Invoke(ctx, ClothService_EditCloth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clothServiceClient) DeleteCloth(ctx context.Context, in *DeleteClothRequest, opts ...grpc.CallOption) (*DeleteClothResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteClothResponse)
	err := c.cc.Invoke(ctx, ClothService_DeleteCloth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clothServiceClient) ListClothes(ctx context.Context, in *ListClothesRequest, opts ...grpc.CallOption) (*ListClothesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClothesResponse)
	err := c.cc.Invoke(ctx, ClothService_ListClothes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClothServiceServer is the server API for ClothService service.
// All implementations must embed UnimplementedClothServiceServer
// for forward compatibility
type ClothServiceServer interface {
	CreateCloth(context.Context, *CreateClothRequest) (*CreateClothResponse, error)
	GetCloth(context.Context, *GetClothRequest) (*GetClothResponse, error)
	EditCloth(context.Context, *EditClothRequest) (*EditClothResponse, error)
	DeleteCloth(context.Context, *DeleteClothRequest) (*DeleteClothResponse, error)
	ListClothes(context.Context, *ListClothesRequest) (*ListClothesResponse, error)
	mustEmbedUnimplementedClothServiceServer()
}

// UnimplementedClothServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClothServiceServer struct {
}

func (UnimplementedClothServiceServer) CreateCloth(context.Context, *CreateClothRequest) (*CreateClothResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloth not implemented")
}
func (UnimplementedClothServiceServer) GetCloth(context.Context, *GetClothRequest) (*GetClothResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloth not implemented")
}
func (UnimplementedClothServiceServer) EditCloth(context.Context, *EditClothRequest) (*EditClothResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCloth not implemented")
}
func (UnimplementedClothServiceServer) DeleteCloth(context.Context, *DeleteClothRequest) (*DeleteClothResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloth not implemented")
}
func (UnimplementedClothServiceServer) ListClothes(context.Context, *ListClothesRequest) (*ListClothesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClothes not implemented")
}
func (UnimplementedClothServiceServer) mustEmbedUnimplementedClothServiceServer() {}

// UnsafeClothServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClothServiceServer will
// result in compilation errors.
type UnsafeClothServiceServer interface {
	mustEmbedUnimplementedClothServiceServer()
}

func RegisterClothServiceServer(s grpc.ServiceRegistrar, srv ClothServiceServer) {
	s.RegisterService(&ClothService_ServiceDesc, srv)
}

func _ClothService_CreateCloth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClothRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClothServiceServer).CreateCloth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClothService_CreateCloth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClothServiceServer).CreateCloth(ctx, req.(*CreateClothRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClothService_GetCloth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClothRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClothServiceServer).GetCloth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClothService_GetCloth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClothServiceServer).GetCloth(ctx, req.(*GetClothRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClothService_EditCloth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditClothRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClothServiceServer).EditCloth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClothService_EditCloth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClothServiceServer).EditCloth(ctx, req.(*EditClothRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClothService_DeleteCloth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClothRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClothServiceServer).DeleteCloth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClothService_DeleteCloth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClothServiceServer).DeleteCloth(ctx, req.(*DeleteClothRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClothService_ListClothes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClothesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClothServiceServer).ListClothes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClothService_ListClothes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClothServiceServer).ListClothes(ctx, req.(*ListClothesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClothService_ServiceDesc is the grpc.ServiceDesc for ClothService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClothService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ClothService",
	HandlerType: (*ClothServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCloth",
			Handler:    _ClothService_CreateCloth_Handler,
		},
		{
			MethodName: "GetCloth",
			Handler:    _ClothService_GetCloth_Handler,
		},
		{
			MethodName: "EditCloth",
			Handler:    _ClothService_EditCloth_Handler,
		},
		{
			MethodName: "DeleteCloth",
			Handler:    _ClothService_DeleteCloth_Handler,
		},
		{
			MethodName: "ListClothes",
			Handler:    _ClothService_ListClothes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/clothes.proto",
}

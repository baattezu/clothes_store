package data

import (
	"context" // New import
	"crypto/sha256"
	"database/sql" // New import
	"errors"
	"github.com/nurtikaga/internal/validator"
	"golang.org/x/crypto/bcrypt"
	"strings"
	"time"
)

var AnonymousUser = &UserInfo{}

type UserInfo struct {
	ID         int64     `json:"id"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	Name       string    `json:"name"`
	Surname    string    `json:"surname"`
	Email      string    `json:"email"`
	Password   password  `json:"-"`
	Role       string
	Activated  bool `json:"activated"`
	Version    int  `json:"-"`
	Permission int  `json:"permission"`
}

type password struct {
	plaintext *string
	hash      []byte
}

// Define a custom ErrDuplicateEmail error.
var (
	ErrDuplicateEmail = errors.New("duplicate email")
)

// Create a UserModel struct which wraps the connection pool.
type UserModel struct {
	DB *sql.DB
}

func (u *UserInfo) IsAnonymous() bool {
	return u == AnonymousUser
}

func (p *password) Set(plaintextPassword string) error {
	hash, err := bcrypt.GenerateFromPassword([]byte(plaintextPassword), 12)
	if err != nil {
		return err
	}
	p.plaintext = &plaintextPassword
	p.hash = hash
	return nil
}

func (p *password) Matches(plaintextPassword string) (bool, error) {
	err := bcrypt.CompareHashAndPassword(p.hash, []byte(plaintextPassword))
	if err != nil {
		switch {
		case errors.Is(err, bcrypt.ErrMismatchedHashAndPassword):
			return false, nil
		default:
			return false, err
		}
	}
	return true, nil
}
func ValidateEmail(v *validator.Validator, email string) {
	v.Check(email != "", "email", "must be provided")
	v.Check(validator.Matches(email, validator.EmailRX), "email", "must be a valid email address")
}
func ValidatePasswordPlaintext(v *validator.Validator, password string) {
	v.Check(password != "", "password", "must be provided")
	v.Check(len(password) >= 8, "password", "must be at least 8 bytes long")
	v.Check(len(password) <= 72, "password", "must not be more than 72 bytes long")
}
func ValidateUser(v *validator.Validator, user *UserInfo) {
	v.Check(user.Name != "", "name", "must be provided")
	v.Check(len(user.Name) <= 500, "name", "must not be more than 500 bytes long")
	// Call the standalone ValidateEmail() helper.
	ValidateEmail(v, user.Email)
	// If the plaintext password is not nil, call the standalone
	// ValidatePasswordPlaintext() helper.
	if user.Password.plaintext != nil {
		ValidatePasswordPlaintext(v, *user.Password.plaintext)
	}
	// If the password hash is ever nil, this will be due to a logic error in our
	// codebase (probably because we forgot to set a password for the user). It's a
	// useful sanity check to include here, but it's not a problem with the data
	// provided by the client. So rather than adding an error to the validation map we
	// raise a panic instead.
	if user.Password.hash == nil {
		panic("missing password hash for user")
	}
}

// Insert a new record in the database for the user. Note that the id, created_at and
// version fields are all automatically generated by our database, so we use the
// RETURNING clause to read them into the User struct after the insert, in the same way
// that we did when creating a movie.
func (m UserModel) Insert(user *UserInfo) error {
	permissionID := 1
	query := `
INSERT INTO user_info (fname, sname, email, password_hash, activated, permission_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at,updated_at, version`
	args := []interface{}{user.Name, user.Surname, user.Email, user.Password.hash, user.Activated, permissionID}
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	err := m.DB.QueryRowContext(ctx, query, args...).Scan(&user.ID, &user.CreatedAt, &user.UpdatedAt, &user.Version)
	if err != nil {
		switch {
		case strings.Contains(err.Error(), `duplicate key value violates unique constraint "user_info_email_key"`):
			return ErrDuplicateEmail
		default:
			return err
		}
	}
	return nil
}

func (m UserModel) Update(user *UserInfo) error {
	query := `
UPDATE user_info
SET fname = $1, sname = $2, email = $3, password_hash = $4, activated = $5, version = version + 1
WHERE id = $6 AND version = $7
RETURNING version`
	args := []interface{}{
		user.Name,
		user.Surname,
		user.Email,
		user.Password.hash,
		user.Activated,
		user.ID,
		user.Version,
	}
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	err := m.DB.QueryRowContext(ctx, query, args...).Scan(&user.Version)
	if err != nil {
		switch {
		case strings.Contains(err.Error(), `duplicate key value violates unique constraint "user_info_email_key"`):
			return ErrDuplicateEmail
		case errors.Is(err, sql.ErrNoRows):
			return ErrEditConflict
		default:
			return err
		}
	}
	return nil
}

func (m UserModel) GetByEmail(email string) (*UserInfo, error) {
	query := `
SELECT id, created_at, updated_at, fname, sname, email, password_hash, activated, version
FROM user_info
WHERE email = $1`
	var user UserInfo
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	err := m.DB.QueryRowContext(ctx, query, email).Scan(
		&user.ID,
		&user.CreatedAt,
		&user.UpdatedAt,
		&user.Name,
		&user.Surname,
		&user.Email,
		&user.Password.hash,
		&user.Activated,
		&user.Version,
	)
	if err != nil {
		switch {
		case errors.Is(err, sql.ErrNoRows):
			return nil, ErrRecordNotFound
		default:
			return nil, err
		}
	}
	return &user, nil
}
func (m UserModel) Delete(userID int64) error {
	query := `
DELETE FROM user_info
WHERE id = $1`
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	_, err := m.DB.ExecContext(ctx, query, userID)
	if err != nil {
		return err
	}
	return nil
}

func (m UserModel) GetAll(string, string, string, Filters) ([]*UserInfo, error) {
	query := `
SELECT id, created_at, updated_at, fname, sname, email, password_hash, activated, version
FROM user_info`
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	rows, err := m.DB.QueryContext(ctx, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	users := []*UserInfo{}
	for rows.Next() {
		var user UserInfo
		err := rows.Scan(
			&user.ID,
			&user.CreatedAt,
			&user.UpdatedAt,
			&user.Name,
			&user.Surname,
			&user.Email,
			&user.Password.hash,
			&user.Activated,
			&user.Version,
		)
		if err != nil {
			return nil, err
		}
		users = append(users, &user)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return users, nil
}
func (m UserModel) GetForToken(tokenScope, tokenPlaintext string) (*UserInfo, error) {
	// Calculate the SHA-256 hash of the plaintext token provided by the client.
	tokenHash := sha256.Sum256([]byte(tokenPlaintext))
	// Set up the SQL query.
	query := `
SELECT user_info.id, user_info.created_at, user_info.fname, user_info.sname, user_info.email, user_info.password_hash, user_info.activated, user_info.version
FROM user_info
INNER JOIN tokens
ON user_info.id = tokens.user_id
WHERE tokens.hash = $1
AND tokens.scope = $2
AND tokens.expiry > $3`
	// Create a slice containing the query arguments.
	args := []interface{}{tokenHash[:], tokenScope, time.Now()}
	var user UserInfo
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()
	// Execute the query, scanning the return values into a User struct.
	err := m.DB.QueryRowContext(ctx, query, args...).Scan(
		&user.ID,
		&user.CreatedAt,
		&user.Name,
		&user.Surname,
		&user.Email,
		&user.Password.hash,
		&user.Activated,
		&user.Version,
	)
	if err != nil {
		switch {
		case errors.Is(err, sql.ErrNoRows):
			return nil, ErrRecordNotFound
		default:
			return nil, err
		}
	}
	// Return the matching user.
	return &user, nil
}
func (m UserModel) GetByID(userID int64) (*UserInfo, error) {
	query := `
SELECT id, created_at, updated_at, fname, sname, email, password_hash, activated, version
FROM user_info
WHERE id = $1`

	var user UserInfo
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	err := m.DB.QueryRowContext(ctx, query, userID).Scan(
		&user.ID,
		&user.CreatedAt,
		&user.UpdatedAt,
		&user.Name,
		&user.Surname,
		&user.Email,
		&user.Password.hash,
		&user.Activated,
		&user.Version,
	)
	if err != nil {
		switch {
		case errors.Is(err, sql.ErrNoRows):
			return nil, ErrRecordNotFound
		default:
			return nil, err
		}
	}
	return &user, nil
}

func (m UserModel) GetAllCheck() ([]*UserInfo, error) {
	query := `SELECT id, created_at, fname, sname, email, activated, version FROM user_info`
	rows, err := m.DB.Query(query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var users []*UserInfo
	for rows.Next() {
		var user UserInfo
		err = rows.Scan(&user.ID,
			&user.CreatedAt, &user.Name,
			&user.Surname, &user.Email,
			&user.Activated,
			&user.Version)
		if err != nil {
			return nil, err
		}
		users = append(users, &user)
	}
	if err = rows.Err(); err != nil {
		return nil, err
	}
	return users, nil
}

type MockUserModel struct {
	DB *sql.DB
}

func (m MockUserModel) Insert(user *UserInfo) error {
	if user.Email == "admin@gmail.com" {
		return ErrDuplicateEmail
	}
	return nil
}

func (m MockUserModel) GetByEmail(email string) (*UserInfo, error) {
	passwd := "Qwerty1!"
	hash, _ := bcrypt.GenerateFromPassword([]byte(passwd), 12)

	if email == "admin@gmail.com" {
		return &UserInfo{
			ID:        1,
			CreatedAt: time.Now(),
			Name:      "Admin",
			Email:     "admin@gmail.com",
			Password:  password{&passwd, hash},
			Activated: true,
			Version:   1,
		}, nil
	}

	return nil, ErrRecordNotFound
}

func (m MockUserModel) Update(user *UserInfo) error {
	return nil
}

func (m MockUserModel) GetForToken(tokenScope, tokenPlaintext string) (*UserInfo, error) {
	passwd := "Qwerty!"
	hash, _ := bcrypt.GenerateFromPassword([]byte(passwd), 12)

	return &UserInfo{
		ID:        1,
		CreatedAt: time.Now(),
		Name:      "Admin",
		Email:     "admin@gmail.com",
		Password:  password{&passwd, hash},
		Activated: true,
		Version:   1,
	}, nil
}
